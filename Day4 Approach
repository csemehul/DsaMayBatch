Dry - Run:
Please give it a minute of reading, i have tried to make it as readable as possible:

Input: grid = [[0, 0, 1], [0, 0, 0], [0, 0, 0]]

First, we call the bfs function to compute the minimum distance from each cell to the nearest thief. This will initialize the score matrix with the minimum distances.

bfs(grid, score, 3)
Initial state:

grid:
 [0, 0, 1]
 [0, 0, 0]
 [0, 0, 0]

score (initialized to INT_MAX):
 [ INT_MAX, INT_MAX, INT_MAX ]
 [ INT_MAX, INT_MAX, INT_MAX ]
 [ INT_MAX, INT_MAX, INT_MAX ]
The BFS starts from the thief cell (0, 2). It sets score[0][2] = 0 and pushes (0, 2) into the queue.

queue: [(0, 2)]
score:
 [ INT_MAX, INT_MAX,       0 ]
 [ INT_MAX, INT_MAX, INT_MAX ]
 [ INT_MAX, INT_MAX, INT_MAX ]
It then processes the neighbors of (0, 2), updating their scores and pushing them into the queue:

queue: [(0, 1), (1, 2)]
score:
 [ INT_MAX,       1,       0 ]
 [ INT_MAX, INT_MAX,       1 ]
 [ INT_MAX, INT_MAX, INT_MAX ]
Continuing the BFS:

queue: [(0, 0), (1, 1), (1, 2), (2, 2)]
score:
 [       2,       1,   0 ]
 [ INT_MAX,       2,   1 ]
 [ INT_MAX, INT_MAX,   2 ]
At the end of the BFS, the score matrix will be:

score:
 [ 2, 1, 0 ]
 [ 3, 2, 1 ]
 [ 4, 3, 2 ]
This means that the minimum distance from any cell to the thief at (0, 2) is stored in the corresponding cell of the score matrix.

Next, we initialize a priority queue with the starting cell (0, 0) and its score score[0][0] = 2.

pq: [(2, (0, 0))]
We process the neighbors of (0, 0), pushing them into the priority queue with the minimum of their scores and the current safeness factor (2):

pq: [(1, (0, 1)), (2, (1, 0))]
We continue processing the priority queue. The next cell to process is (0, 1) with a safeness factor of 1.

pq: [(2, (1, 0))]
However, since the target cell (2, 2) has not been reached, we process the neighbors of (0, 1), pushing them into the priority queue with the minimum of their scores and the current safeness factor (1):

pq: [(1, (0, 0)), (1, (1, 1)), (2, (1, 0))]
The next cell to process is (1, 1) with a safeness factor of 1.

pq: [(1, (0, 0)), (2, (1, 0)), (2, (2, 1))]
We continue processing the priority queue until we reach the target cell (2, 2) with a safeness factor of 2.

pq: [(1, (0, 0)), (2, (1, 0)), (2, (2, 1)), (2, (2, 2))]
Now that we have reached our destination which was (n - 1, n - 1), we will return the max safeness factor till now.

thus, the output for this input is 2, as expected.
